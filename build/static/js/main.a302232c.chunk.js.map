{"version":3,"sources":["images/trivia.png","images/arrow.png","pages/Login.js","redux/actions/index.js","components/Header.js","pages/Feedback.js","pages/Ranking.js","pages/Config.js","pages/NotFound.js","components/Timer.js","components/Question.js","pages/Game.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/game.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js"],"names":["module","exports","Login","props","state","name","email","handleChange","bind","handleClick","this","requestToken","storeName","storeEmail","target","value","setState","test","length","src","logo","className","alt","placeholder","data-testid","onChange","to","type","disabled","validateInputs","onClick","Component","connect","dispatch","fetch","then","data","json","response","localStorage","setItem","token","payload","Header","saveImage","hash","md5","toString","url","score","hashCreate","player","gravatarEmail","Feedback","picture","resetQuestions","ranking","getItem","playerRanking","JSON","parse","newRanking","stringify","assertions","parseInt","gravatarUrl","Ranking","clearPlayerState","sortRanking","sort","a","b","renderThead","map","index","key","Config","categories","category","difficulty","trivia_categories","saveConfig","htmlFor","id","dif","renderCategoryList","renderDifficulty","renderTypeList","renderButton","configSettings","NotFound","Timer","count","timer","prevProps","prevState","setTimer","clicked","clearInterval","interval","timeOut","setInterval","Question","randomized","onClickQuestion","randomize","correct","questionAPI","setAssertion","setScore","getTimer","saveScore","setVisibility","points","hard","medium","easy","answersOptions","array","Array","keys","lastIndex","randomIndex","Math","floor","random","temp","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","incorrect","answer","allAnswers","_answer","game","Game","questionNumber","nextQuestion","getToken","sendQuestions","clrScore","getQuestions","renderQuestion","visibility","arrow","questions","results","fetchQuestions","Boolean","window","location","hostname","match","INITIAL_STATE","action","actualState","questionsList","thisQuestion","atob","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a302232c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.8ee717d1.png\";","module.exports = __webpack_public_path__ + \"static/media/arrow.12ac286a.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { fetchToken, updateEmail, updateName } from '../redux/actions';\nimport logo from '../images/trivia.png';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { requestToken, storeName, storeEmail } = this.props;\n    const { name, email } = this.state;\n    storeName(name);\n    storeEmail(email);\n    requestToken();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  validateInputs() {\n    const { name, email } = this.state;\n    const validEmail = /^[a-z0-9_.-]+@[a-z]+\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/;\n    const validName = 1;\n    if (validEmail.test(email) && name.length >= validName) {\n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    const { name, email } = this.state;\n\n    return (\n      <form>\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <fieldset className=\"container\">\n          <input\n            name=\"name\"\n            placeholder=\"Nome\"\n            data-testid=\"input-player-name\"\n            value={ name }\n            onChange={ this.handleChange }\n          />\n          <input\n            name=\"email\"\n            placeholder=\"Email\"\n            data-testid=\"input-gravatar-email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <Link to=\"/game\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={ this.validateInputs() }\n              className={ this.validateInputs() ? 'btn-disabled' : 'btn-login' }\n              onClick={ this.handleClick }\n            >\n              Jogar\n            </button>\n          </Link>\n          <Link to=\"/config\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              className=\"btn-settings\"\n            >\n              Configurações\n            </button>\n          </Link>\n        </fieldset>\n      </form>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestToken: () => dispatch(fetchToken()),\n  storeName: (name) => dispatch(updateName(name)),\n  storeEmail: (email) => dispatch(updateEmail(email)),\n\n});\n\nLogin.propTypes = {\n  requestToken: propTypes.func.isRequired,\n  storeName: propTypes.func.isRequired,\n  storeEmail: propTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const UPDATE_NAME = 'UPDATE_NAME';\nexport const UPDATE_QUESTION = 'UPDATE_QUESTION';\nexport const UPDATE_EMAIL = 'UPDATE_EMAIL';\nexport const UPDATE_TOKEN = 'UPDATE_TOKEN';\nexport const INCREASE_ASSERTIONS = 'INCREASE_ASSERTIONS';\nexport const INCREASE_SCORE = 'INCREASE_SCORE';\nexport const GET_TIME = 'GET_TIME';\nexport const SAVE_STORAGE = 'SAVE_STORAGE';\nexport const SAVE_IMAGE_URL = 'SAVE_IMAGE_URL';\nexport const CLEAR_SCORE = 'CLEAR_SCORE';\nexport const CLEAR_QUESTIONS = 'CLEAR_QUESTIONS';\nexport const SAVE_CONFIG_OPTIONS = 'SAVE_CONFIG_OPTIONS';\n\nconst TRIVIA_API = 'https://opentdb.com/api_token.php?command=request';\n\nexport const clearScore = () => ({\n  type: CLEAR_SCORE,\n});\n\nexport const clearQuestions = () => ({\n  type: CLEAR_QUESTIONS,\n});\n\nexport const saveConfigOptions = (payload) => ({\n  type: SAVE_CONFIG_OPTIONS,\n  payload,\n});\n\nexport const updateName = (payload) => ({\n  type: UPDATE_NAME,\n  payload,\n});\n\nconst updateToken = (payload) => ({\n  type: UPDATE_TOKEN,\n  payload,\n});\n\nexport const updateEmail = (payload) => ({\n  type: UPDATE_EMAIL,\n  payload,\n});\n\nexport const saveImageUrl = (payload) => ({\n  type: SAVE_IMAGE_URL,\n  payload,\n});\n\nexport const increaseAssertions = () => ({\n  type: INCREASE_ASSERTIONS,\n});\n\nexport const increaseScore = (payload) => ({\n  type: INCREASE_SCORE,\n  payload,\n});\n\nexport const getTime = (payload) => ({\n  type: GET_TIME,\n  payload,\n});\n\nexport const saveStorage = () => ({\n  type: SAVE_STORAGE,\n});\n\nexport const fetchToken = () => (dispatch) => (\n  fetch(TRIVIA_API)\n    .then((data) => data.json())\n    .then((response) => {\n      localStorage.setItem('token', response.token);\n      dispatch(updateToken(response.token));\n    })\n);\n\nconst updateQuestion = (payload) => ({\n  type: UPDATE_QUESTION,\n  payload,\n});\n\nexport const fetchQuestions = (\n  { getToken, category, difficulty, type },\n) => (dispatch) => (\n  fetch(`https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficulty}&type=${type}&token=${getToken}&encode=base64`)\n    .then((data) => data.json())\n    .then((response) => {\n      dispatch(updateQuestion(response.results));\n    })\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { saveImageUrl } from '../redux/actions';\nimport './Header.css';\n\nclass Header extends Component {\n  hashCreate() {\n    const { email, saveImage } = this.props;\n    const hash = md5(email).toString();\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    saveImage(url);\n    return url;\n  }\n\n  render() {\n    const { name, score } = this.props;\n    return (\n      <header>\n        <img\n          src={ this.hashCreate() }\n          data-testid=\"header-profile-picture\"\n          alt=\"Foto do perfil\"\n        />\n        <p>\n          {'Jogador: '}\n          <span data-testid=\"header-player-name\">{ name }</span>\n        </p>\n        <p>\n          {'Score: '}\n          <span data-testid=\"header-score\">{ score }</span>\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  saveImage: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveImage: (url) => dispatch(saveImageUrl(url)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { clearQuestions } from '../redux/actions';\nimport './Feedback.css';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    const { name, score, picture, resetQuestions } = this.props;\n    resetQuestions();\n    const ranking = localStorage.getItem('ranking');\n    if (ranking) {\n      const playerRanking = JSON.parse(ranking);\n      const newRanking = [...playerRanking, { name, score, picture }];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n    } else {\n      localStorage.setItem('ranking', JSON.stringify([{ name, score, picture }]));\n    }\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const minAssertions = 3;\n    return (\n      <div className=\"feedback-page\">\n        <Header />\n        <div className=\"feedback-container\">\n          <h3 data-testid=\"feedback-text\">\n            { assertions >= minAssertions ? 'Mandou bem!' : 'Podia ser melhor...!' }\n          </h3>\n          <p>\n            {'Acertos: '}\n            <span data-testid=\"feedback-total-question\">\n              { parseInt(assertions, 10) }\n            </span>\n          </p>\n          <p>\n            {'Score: '}\n            <span data-testid=\"feedback-total-score\">\n              { parseInt(score, 10) }\n            </span>\n          </p>\n          <Link to=\"/\">\n            <button type=\"button\" data-testid=\"btn-play-again\">\n              Jogar novamente\n            </button>\n          </Link>\n          <Link to=\"/ranking\">\n            <button type=\"button\" data-testid=\"btn-ranking\">\n              Ver Ranking\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  resetQuestions: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  name: state.player.name,\n  picture: state.player.gravatarUrl,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetQuestions: () => dispatch(clearQuestions()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { clearScore } from '../redux/actions';\nimport './Ranking.css';\n\nclass Ranking extends Component {\n  componentDidMount() {\n    const { clearPlayerState } = this.props;\n    clearPlayerState();\n  }\n\n  renderThead() {\n    return (\n      <thead>\n        <tr>\n          <th>Posição</th>\n          <th>Avatar</th>\n          <th>Nome</th>\n          <th>Pontuação</th>\n        </tr>\n      </thead>\n    );\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const sortRanking = ranking.sort((a, b) => (\n      b.score - a.score\n    ));\n    return (\n      <div className=\"ranking-container\">\n        <section className=\"ranking\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <div className=\"table-container\">\n            <table>\n              { this.renderThead() }\n              <tbody>\n                {sortRanking.map(({ name, score, picture }, index) => (\n                  <tr key={ index }>\n                    <td>{index + 1}</td>\n                    <td>\n                      <img\n                        className=\"ranking-avatar\"\n                        src={ picture }\n                        alt=\"Imagem do jogador\"\n                      />\n                    </td>\n                    <td data-testid={ `player-name-${index}` }>{ name }</td>\n                    <td data-testid={ `player-score-${index}` }>{ score }</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <Link to=\"/\">\n            <button type=\"button\" data-testid=\"btn-go-home\">Início</button>\n          </Link>\n        </section>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  clearPlayerState: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearPlayerState: () => dispatch(clearScore()),\n});\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { saveConfigOptions } from '../redux/actions';\nimport './Config.css';\nimport logo from '../images/trivia.png';\n\nclass Config extends Component {\n  constructor() {\n    super();\n    this.state = {\n      categories: [],\n      category: '',\n      difficulty: '',\n      type: '',\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://opentdb.com/api_category.php')\n      .then((data) => data.json())\n      .then((response) => this.setState({\n        categories: response.trivia_categories,\n      }));\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick(category, difficulty, type) {\n    const { saveConfig } = this.props;\n    saveConfig({ category, difficulty, type });\n  }\n\n  renderButton() {\n    const { category, difficulty, type } = this.state;\n    return (\n      <Link to=\"/\">\n        <button\n          type=\"button\"\n          className=\"btn-config\"\n          onClick={ () => this.handleClick(category, difficulty, type) }\n        >\n          Salvar\n        </button>\n      </Link>\n    );\n  }\n\n  renderCategoryList() {\n    const { categories, category } = this.state;\n    return (\n      <label htmlFor=\"category-select\">\n        Categoria\n        <select\n          id=\"category-select\"\n          value={ category }\n          name=\"category\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"\">Qualquer</option>\n          {categories.map(({ id, name }) => (\n            <option key={ id } value={ id }>{ name }</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  renderDifficulty() {\n    const dificulties = ['easy', 'medium', 'hard'];\n    const { difficulty } = this.state;\n    return (\n      <label htmlFor=\"dificulty-select\">\n        Dificuldade\n        <select\n          id=\"dificulty-select\"\n          value={ difficulty }\n          name=\"difficulty\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"\">Todas</option>\n          {dificulties.map((dif, index) => (\n            <option key={ index } value={ dif }>{ dif }</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  renderTypeList() {\n    const { type } = this.state;\n    return (\n      <label htmlFor=\"type-select\">\n        Tipo de perguntas\n        <select\n          id=\"type-select\"\n          value={ type }\n          name=\"type\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"\">Todas</option>\n          <option value=\"multiple\">Múltipla Escolha</option>\n          <option value=\"boolean\">V ou F</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"config-page\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <div className=\"container\">\n          <h1 data-testid=\"settings-title\">Configurações</h1>\n          { this.renderCategoryList() }\n          { this.renderDifficulty() }\n          { this.renderTypeList() }\n          { this.renderButton() }\n        </div>\n      </div>);\n  }\n}\n\nConfig.propTypes = {\n  saveConfig: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveConfig: (configSettings) => dispatch(saveConfigOptions(configSettings)),\n});\n\nexport default connect(null, mapDispatchToProps)(Config);\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (<div>NotFound</div>);\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getTime } from '../redux/actions';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 30,\n    };\n\n    this.timer = this.timer.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { setTimer, clicked } = this.props;\n    const { count } = this.state;\n    setTimer(count);\n    if (prevState.count === 1 || clicked) {\n      clearInterval(this.interval);\n      const { timeOut } = this.props;\n      timeOut(false);\n    }\n  }\n\n  timer() {\n    const contdownInterval = 1000;\n    this.interval = setInterval(() => this.setState((prevState) => (\n      { count: prevState.count - 1 })), contdownInterval);\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div>\n        Tempo:\n        {count}\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = ({\n  setTimer: PropTypes.func,\n  clicked: PropTypes.bool,\n}).isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  setTimer: (count) => dispatch(getTime(count)),\n});\n\nexport default connect(null, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './question.css';\nimport { connect } from 'react-redux';\nimport { increaseAssertions, increaseScore, saveStorage } from '../redux/actions';\nimport Timer from './Timer';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false,\n      randomized: [],\n    };\n    this.onClickQuestion = this.onClickQuestion.bind(this);\n    this.randomize = this.randomize.bind(this);\n  }\n\n  componentDidMount() {\n    this.randomize();\n  }\n\n  onClickQuestion(correct) {\n    const { questionAPI,\n      setAssertion,\n      setScore,\n      getTimer,\n      saveScore,\n      setVisibility } = this.props;\n    const { difficulty } = questionAPI;\n    const multiplier = { hard: 3, medium: 2, easy: 1 }[difficulty];\n    const BASE_POINTS = 10;\n    const points = BASE_POINTS + multiplier * getTimer;\n    this.setState({\n      clicked: true,\n    });\n\n    if (correct) {\n      setAssertion();\n      setScore(points);\n    } else {\n      setScore(0);\n    }\n    saveScore();\n    setVisibility(true);\n  }\n\n  randomize() {\n    const { questionAPI: { type } } = this.props;\n    let answersOptions = 2;\n    if (type === 'multiple') {\n      answersOptions += 2;\n    }\n    const array = [...Array(answersOptions).keys()];\n    for (let lastIndex = array.length - 1; lastIndex >= 0; lastIndex -= 1) {\n      const randomIndex = Math.floor(Math.random() * (lastIndex + 1));\n      const temp = array[lastIndex];\n      array[lastIndex] = array[randomIndex];\n      array[randomIndex] = temp;\n    }\n    this.setState({ randomized: [...array] });\n  }\n\n  render() {\n    const { questionAPI } = this.props;\n    const { clicked, randomized } = this.state;\n    const {\n      category,\n      question,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = questionAPI;\n    const correct = (\n      <button\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        key=\"4\"\n        onClick={ () => this.onClickQuestion(true) }\n        className={ `answer-option ${clicked ? 'correctAnswer' : 'alternative'}` }\n        disabled={ clicked }\n      >\n        {correctAnswer}\n      </button>);\n    const incorrect = incorrectAnswers.map((answer, index) => (\n      <button\n        type=\"button\"\n        key={ index }\n        data-testid={ `wrong-answer-${index}` }\n        onClick={ () => this.onClickQuestion(false) }\n        className={ `answer-option ${clicked ? 'incorrectAnswer' : 'alternative'}` }\n        disabled={ clicked }\n      >\n        {answer}\n      </button>\n    ));\n    const allAnswers = [correct, ...incorrect];\n\n    return (\n      <section>\n        <div className=\"question-title\">\n          <h3 data-testid=\"question-category\">{category}</h3>\n          <Timer timeOut={ this.onClickQuestion } clicked={ clicked } />\n        </div>\n        <p data-testid=\"question-text\">{question}</p>\n        <div className=\"answers\">\n          { allAnswers.map((_answer, index, array) => array[randomized[index]]) }\n        </div>\n      </section>\n    );\n  }\n}\n\nQuestion.propTypes = ({\n  category: PropTypes.string,\n  question: PropTypes.string,\n  correctAnswer: PropTypes.string,\n  incorrectAnswers: PropTypes.arrayOf(PropTypes.string),\n  setAssertion: PropTypes.func,\n  setScore: PropTypes.func,\n  setVisibility: PropTypes.func,\n}).isRequired;\n\nconst mapStateToProps = (state) => ({\n  getTimer: state.game.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAssertion: () => dispatch(increaseAssertions()),\n  setScore: (points) => dispatch(increaseScore(points)),\n  saveScore: () => dispatch(saveStorage()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { fetchQuestions, clearScore, saveStorage } from '../redux/actions';\nimport Question from '../components/Question';\nimport Header from '../components/Header';\nimport './Game.css';\nimport arrow from '../images/arrow.png';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNumber: 0,\n      clicked: false,\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.setVisibility = this.setVisibility.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      getToken, sendQuestions, clrScore, saveScore, category, difficulty, type,\n    } = this.props;\n    sendQuestions({ getToken, category, difficulty, type });\n    clrScore();\n    saveScore();\n  }\n\n  setVisibility(clicked) {\n    this.setState({\n      clicked,\n    });\n  }\n\n  nextQuestion() {\n    this.setState((prevState) => ({\n      questionNumber: prevState.questionNumber + 1,\n      clicked: false,\n    }));\n  }\n\n  renderQuestion() {\n    const { questionNumber } = this.state;\n    const { getQuestions } = this.props;\n    const questionLimit = 4;\n    if (questionNumber <= questionLimit) {\n      return (\n        getQuestions.map((question, index) => (\n          <Question\n            key={ index }\n            setVisibility={ this.setVisibility }\n            questionAPI={ question }\n          />))[questionNumber]\n      );\n    }\n    return <Redirect to=\"/feedback\" />;\n  }\n\n  render() {\n    const { clicked } = this.state;\n    return (\n      <div className=\"game-page\">\n        <Header />\n        <div className=\"game\">\n          { this.renderQuestion() }\n          {\n            clicked && (\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ this.nextQuestion }\n                visibility={ clicked }\n                className=\"btn-next\"\n              >\n                <img src={ arrow } alt=\"imagem de flecha\" className=\"btn-image\" />\n              </button>)\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getToken: state.game.token,\n  getQuestions: state.game.questions,\n  category: state.game.category,\n  difficulty: state.game.difficulty,\n  type: state.game.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendQuestions: (token) => dispatch(fetchQuestions(token)),\n  clrScore: () => dispatch(clearScore()),\n  saveScore: () => dispatch(saveStorage()),\n});\n\nGame.propTypes = ({\n  getToken: PropTypes.string,\n  sendQuestions: PropTypes.func,\n  saveScore: PropTypes.func,\n  clrScore: PropTypes.func,\n}).isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  UPDATE_NAME,\n  UPDATE_EMAIL,\n  INCREASE_ASSERTIONS,\n  INCREASE_SCORE,\n  SAVE_STORAGE,\n  SAVE_IMAGE_URL,\n  CLEAR_SCORE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  gravatarUrl: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case CLEAR_SCORE:\n    return { ...state, score: 0, assertions: 0 };\n  case SAVE_IMAGE_URL:\n    return { ...state, gravatarUrl: action.payload };\n  case UPDATE_NAME:\n    return { ...state, name: action.payload };\n  case UPDATE_EMAIL:\n    return { ...state, gravatarEmail: action.payload };\n  case INCREASE_ASSERTIONS:\n    return { ...state, assertions: state.assertions + 1 };\n  case INCREASE_SCORE:\n    return { ...state, score: state.score + action.payload };\n  case SAVE_STORAGE:\n  { const actualState = JSON.stringify({ player: state });\n    localStorage.setItem('state', actualState);\n    return state;\n  }\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { UPDATE_TOKEN, UPDATE_QUESTION, GET_TIME,\n  SAVE_CONFIG_OPTIONS, CLEAR_QUESTIONS } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n  questions: [],\n  timer: 30,\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_CONFIG_OPTIONS: {\n    const { category, difficulty, type } = action.payload;\n    return { ...state, category, difficulty, type };\n  }\n  case UPDATE_TOKEN:\n    return { ...state, token: action.payload };\n  case UPDATE_QUESTION: {\n    const questionsList = action.payload.map((thisQuestion) => (\n      {\n        ...thisQuestion,\n        question: window.atob(thisQuestion.question),\n        category: window.atob(thisQuestion.category),\n        type: window.atob(thisQuestion.type),\n        difficulty: window.atob(thisQuestion.difficulty),\n        correct_answer: window.atob(thisQuestion.correct_answer),\n        incorrect_answers:\n          thisQuestion.incorrect_answers.map((answer) => window.atob(answer)),\n      }));\n    return { ...state, questions: questionsList };\n  }\n  case GET_TIME:\n    return { ...state, timer: action.payload };\n  case CLEAR_QUESTIONS:\n    return { ...state, questions: [] };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport game from './game';\n\nconst rootReducer = combineReducers({ player, game });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename=\"trybe-project-trivia\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Config from './pages/Config';\nimport NotFound from './pages/NotFound';\nimport Game from './pages/Game';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n        <Route path=\"/config\" component={ Config } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}